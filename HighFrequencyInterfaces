package com.example.algorithm.huawei.kexin;

import java.util.*;

/**
 * 高频res接口
 * 某系统开放了多个res接口共第三方系统调用，同时记录了这些接口的调用信息，存放与日志invokes中，invokes[i]=[time,interfaceId],
 * 表示在时刻time，接口interfgaceId被调用了一次。时间窗口长度为timeSegment，若存在一个时间窗口[t,t+timeSegment]，其被调用次
 * 数不少于miniLinits,则为高频接口。根据日志统计出所有高频接口，并按升序返回，若没有则为空列表。
 *
 * 解答：
 * 1.存储调用时间：通过 interfaceCallTimes 这个 HashMap，将每个接口的调用时间记录下来。键为接口 ID，值为该接口的调用时间列表。
 * 2.遍历和排序：对每个接口的调用时间列表进行排序，方便后续滑动窗口的计算。
 * 3.滑动窗口计算：使用嵌套循环模拟滑动窗口，计算在每个时间窗口内的调用次数。
 * 4.判断高频接口：如果某个接口在某个时间窗口内的调用次数不少于 minLimits，则将该接口 ID 加入到 highFrequencyInterfaces 列表中。
 * 5.排序和返回：对 highFrequencyInterfaces 列表进行排序，然后返回结果。
 *
 * @Author why
 * @Date 2025/1/3 01:09
 * @Version 1.0
 */
public class HighFrequencyInterfaces {
    public static List<Integer> findHighFrequencyInterfaces(int[][] invokes, int timeSegment, int minLimits) {
        // 用于存储每个接口的调用时间列表
        Map<Integer, List<Integer>> interfaceCallTimes = new HashMap<>();

        // 遍历调用日志，将每个接口的调用时间记录下来
        for (int[] invoke : invokes) {
            int time = invoke[0];
            int interfaceId = invoke[1];
            interfaceCallTimes.putIfAbsent(interfaceId, new ArrayList<>());
            interfaceCallTimes.get(interfaceId).add(time);
        }

        // 用于存储高频接口
        List<Integer> highFrequencyInterfaces = new ArrayList<>();

        // 遍历每个接口的调用时间列表，判断是否为高频接口
        for (Map.Entry<Integer, List<Integer>> entry : interfaceCallTimes.entrySet()) {
            int interfaceId = entry.getKey();
            List<Integer> times = entry.getValue();
            Collections.sort(times);

            int count = 0;
            for (int i = 0; i < times.size(); i++) {
                for (int j = i; j < times.size(); j++) {
                    if (times.get(j) - times.get(i) <= timeSegment) {
                        count = Math.max(count, j - i + 1);
                    }
                }
            }

            if (count >= minLimits) {
                highFrequencyInterfaces.add(interfaceId);
            }
        }

        Collections.sort(highFrequencyInterfaces);
        return highFrequencyInterfaces;
    }

    public static void main(String[] args) {
        int[][] invokes = {{1, 1}, {2, 2}, {3, 1}, {4, 3}, {5, 1}, {6, 2}, {7, 2}};
        int timeSegment = 2;
        int minLimits = 3;
        List<Integer> result = findHighFrequencyInterfaces(invokes, timeSegment, minLimits);
        System.out.println(result);
    }
}
