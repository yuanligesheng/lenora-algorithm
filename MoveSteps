package com.example.algorithm.huawei.kexin;

/**
 * 求连续值遍历步数
 * 将从1开始的连续整数随机打乱，存放到数组 numbers中，请计算从1开始递增访问完所有元素，总共需要移动的步数。
 *
 * 输入
 * 2<= numbers,length <= 100, 1 <= numbers[i]<= numbers.length
 *
 * 输出
 * 一个整数，表示需要移动的步数
 *
 * 样例1
 * 输入:[4，3，6，1，5，2]
 * 输出:13
 * 解释:从元素1到2，移动2步，即1-->5-->2
 *
 *         从元素2到3，移动4步，即2-->5-->1-->6-->3
 *
 *         从元素3到4，移动1步
 *
 *         从元素4到5，移动4步
 *
 *         从元素5到6，移动2步
 *
 *         共移动2+4+1+4+2=13步
 *
 * 样例2
 *  输入:[1，2、3、10，9，8，7、6、4，5]
 * 输出:15
 * 解释：无
 *
 * 解答：
 * 构建索引映射数组：indexMap 数组用于记录每个数字在 numbers 数组中的位置
 *
 * @Author why
 * @Date 2025/1/3 00:45
 * @Version 1.0
 */
public class MoveSteps {
    public static int calculateSteps(int[] numbers) {
        int n = numbers.length;
        int[] indexMap = new int[n + 1];
        for (int i = 0; i < n; i++) {
            indexMap[numbers[i]] = i;
        }
        int steps = 0;
        for (int i = 1; i < n; i++) {
            int currentIndex = indexMap[i];
            int nextIndex = indexMap[i + 1];
            steps += Math.abs(currentIndex - nextIndex);
        }
        return steps;
    }

    public static void main(String[] args) {
        int[] numbers = {4, 3, 6, 1, 5, 2};
        int steps = calculateSteps(numbers);
        System.out.println(steps);
    }
}
